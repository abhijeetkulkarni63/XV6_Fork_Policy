diff -uNr DIR_XV6_BASE/.cvsignore DIR_XV6_WORKING/.cvsignore
--- DIR_XV6_BASE/.cvsignore	2017-02-12 17:27:09.000000000 -0800
+++ DIR_XV6_WORKING/.cvsignore	1969-12-31 16:00:00.000000000 -0800
@@ -1,16 +0,0 @@
-*.asm
-*.d
-*.sym
-_*
-kernel
-user1
-userfs
-usertests
-xv6.img
-vectors.S
-bochsout.txt
-bootblock
-bootother
-bootother.out
-parport.out
-fmt
diff -uNr DIR_XV6_BASE/defs.h DIR_XV6_WORKING/defs.h
--- DIR_XV6_BASE/defs.h	2017-02-12 17:27:09.000000000 -0800
+++ DIR_XV6_WORKING/defs.h	2017-02-23 14:30:48.777691308 -0800
@@ -118,7 +118,9 @@
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
-
+void			fork_winner(int winner);
+int 			tickets_owned(void);
+int 			transfer_tickets(int pid, int tickets);
 // swtch.S
 void            swtch(struct context**, struct context*);
 
diff -uNr DIR_XV6_BASE/.dir-locals.el DIR_XV6_WORKING/.dir-locals.el
--- DIR_XV6_BASE/.dir-locals.el	2017-02-12 17:27:09.000000000 -0800
+++ DIR_XV6_WORKING/.dir-locals.el	1969-12-31 16:00:00.000000000 -0800
@@ -1,4 +0,0 @@
-((c-mode
-  (indent-tabs-mode . nil)
-  (c-file-style . "bsd")
-  (c-basic-offset . 2)))
diff -uNr DIR_XV6_BASE/.gdbinit.tmpl DIR_XV6_WORKING/.gdbinit.tmpl
--- DIR_XV6_BASE/.gdbinit.tmpl	2017-02-12 17:27:09.000000000 -0800
+++ DIR_XV6_WORKING/.gdbinit.tmpl	1969-12-31 16:00:00.000000000 -0800
@@ -1,27 +0,0 @@
-set $lastcs = -1
-
-define hook-stop
-  # There doesn't seem to be a good way to detect if we're in 16- or
-  # 32-bit mode, but in 32-bit mode we always run with CS == 8 in the
-  # kernel and CS == 35 in user space
-  if $cs == 8 || $cs == 35
-    if $lastcs != 8 && $lastcs != 35
-      set architecture i386
-    end
-    x/i $pc
-  else
-    if $lastcs == -1 || $lastcs == 8 || $lastcs == 35
-      set architecture i8086
-    end
-    # Translate the segment:offset into a physical address
-    printf "[%4x:%4x] ", $cs, $eip
-    x/i $cs*16+$eip
-  end
-  set $lastcs = $cs
-end
-
-echo + target remote localhost:1234\n
-target remote localhost:1234
-
-echo + symbol-file kernel\n
-symbol-file kernel
diff -uNr DIR_XV6_BASE/Makefile DIR_XV6_WORKING/Makefile
--- DIR_XV6_BASE/Makefile	2017-02-12 17:27:09.000000000 -0800
+++ DIR_XV6_WORKING/Makefile	2017-02-23 13:54:37.398926022 -0800
@@ -246,6 +246,9 @@
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c\
+	shutdown.c\
+	proj1_schdtest\
+	proj1_forktest\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
diff -uNr DIR_XV6_BASE/proc.c DIR_XV6_WORKING/proc.c
--- DIR_XV6_BASE/proc.c	2017-02-12 17:27:09.000000000 -0800
+++ DIR_XV6_WORKING/proc.c	2017-03-03 17:23:50.877345613 -0800
@@ -7,6 +7,9 @@
 #include "proc.h"
 #include "spinlock.h"
 
+int STRIDE_TOTAL_TICKETS = 100;
+int TOTAL_PROCESSES = 1;
+
 struct {
   struct spinlock lock;
   struct proc proc[NPROC];
@@ -14,8 +17,8 @@
 
 static struct proc *initproc;
 
+int scheduler_type; // Default scheduler : Round Robin
 int nextpid = 1;
-
 int sched_trace_enabled = 0; // ZYF: for CS550 CPU/process project
 
 extern void forkret(void);
@@ -128,6 +131,8 @@
 // Create a new process copying p as the parent.
 // Sets up stack to return as if from system call.
 // Caller must set state of returned proc to RUNNABLE.
+int fork_selector;
+
 int
 fork(void)
 {
@@ -160,10 +165,28 @@
   safestrcpy(np->name, proc->name, sizeof(proc->name));
  
   pid = np->pid;
-
   // lock to force the compiler to emit the np->state write last.
   acquire(&ptable.lock);
   np->state = RUNNABLE;
+  struct proc *p;
+  if (scheduler_type == 1)
+  {
+  	TOTAL_PROCESSES++;
+  	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) 
+  	{
+ 	  	if (p->state == RUNNABLE || p->state == RUNNING) 
+ 		{
+  	    	p->tickets = STRIDE_TOTAL_TICKETS / TOTAL_PROCESSES;
+  			p->stride = STRIDE_TOTAL_TICKETS / p->tickets;
+  			p->pass = 0;
+  		}
+  	}
+  }
+  
+  if (fork_selector == 1)
+  {
+  	sleep(proc, &ptable.lock);
+  }
   release(&ptable.lock);
   
   return pid;
@@ -210,6 +233,20 @@
 
   // Jump into the scheduler, never to return.
   proc->state = ZOMBIE;
+  if(scheduler_type == 1)
+  {
+  	TOTAL_PROCESSES--;
+  	if(TOTAL_PROCESSES > 0){
+  		for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) 
+  		{
+ 	  		if (p->state == RUNNABLE || p->state == RUNNING) 
+ 			{
+  	    		p->tickets = STRIDE_TOTAL_TICKETS / TOTAL_PROCESSES;
+  				p->stride = STRIDE_TOTAL_TICKETS / p->tickets;
+  			}
+  		}
+  	}
+  }
   sched();
   panic("zombie exit");
 }
@@ -221,7 +258,6 @@
 {
   struct proc *p;
   int havekids, pid;
-
   acquire(&ptable.lock);
   for(;;){
     // Scan through table looking for zombie children.
@@ -268,34 +304,61 @@
 void
 scheduler(void)
 {
-  struct proc *p;
+  struct proc *p, *minPassProc;
   int ran = 0; // CS550: to solve the 100%-CPU-utilization-when-idling problem
-
+  int minPass;
   for(;;){
     // Enable interrupts on this processor.
     sti();
-
+    minPass = 99999;
     // Loop over process table looking for process to run.
+    
     acquire(&ptable.lock);
     ran = 0;
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
-
-      ran = 1;
-      
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
-      swtch(&cpu->scheduler, proc->context);
-      switchkvm();
-
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      proc = 0;
+    if(scheduler_type == 0){
+    	for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    	 	if(p->state != RUNNABLE)
+        		continue;
+     		ran = 1;
+      		// Switch to chosen process.  It is the process's job
+      		// to release ptable.lock and then reacquire it
+      		// before jumping back to us.
+      		proc = p;
+      		switchuvm(p);
+      		p->state = RUNNING;
+      		swtch(&cpu->scheduler, proc->context);
+      		switchkvm();
+
+      		// Process is done running for now.
+      		// It should have changed its p->state before coming back.
+      		proc = 0;
+      	}
+    } else {
+    	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+    		if((p->state == RUNNING || p->state == RUNNABLE) && p->pass < minPass) {
+    			minPass = p->pass;
+    			minPassProc = p;
+    		}
+    	}
+    	for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) 
+    	{
+    		if((p->state == RUNNABLE) && (p->pid == minPassProc->pid))
+    		{
+    			ran = 1;
+    			p->pass = p->pass + p->stride;
+      			// Switch to chosen process.  It is the process's job
+      			// to release ptable.lock and then reacquire it
+      			// before jumping back to us.
+      			proc = p;
+      			switchuvm(p);
+      			p->state = RUNNING;
+      			swtch(&cpu->scheduler, proc->context);
+      			switchkvm();
+      			// Process is done running for now.
+      			// It should have changed its p->state before coming back.
+      			proc = 0;
+    		}
+    	}
     }
     release(&ptable.lock);
 
@@ -434,11 +497,25 @@
       p->killed = 1;
       // Wake process from sleep if necessary.
       if(p->state == SLEEPING)
-        p->state = RUNNABLE;
+      	p->state = RUNNABLE;
       release(&ptable.lock);
       return 0;
     }
   }
+  if(scheduler_type == 1)
+  {
+  	TOTAL_PROCESSES--;
+  	if(TOTAL_PROCESSES > 0){
+  		for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) 
+  		{
+ 	  		if (p->state == RUNNABLE || p->state == RUNNING) 
+ 			{
+  	    		p->tickets = STRIDE_TOTAL_TICKETS / TOTAL_PROCESSES;
+  				p->stride = STRIDE_TOTAL_TICKETS / p->tickets;
+  			}
+  		}
+  	}
+  }
   release(&ptable.lock);
   return -1;
 }
@@ -479,3 +556,38 @@
     cprintf("\n");
   }
 }
+
+int
+tickets_owned(void)
+{
+	struct proc *p;
+	if(scheduler_type == 1) {
+		for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+			if(p->state == RUNNING) {
+				return p->tickets;
+			}
+		}
+	}
+	return -1;
+}
+
+int
+transfer_tickets(int pid, int tickets)
+{
+	struct proc *p;
+	if(scheduler_type == 1) {
+		for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+			if(p->state == RUNNABLE && p->pid == pid) {
+				if(tickets > (p->tickets - 1))
+					return -2;
+				proc->tickets = proc->tickets - tickets;
+				p->tickets = p->tickets + tickets;
+  				p->stride = STRIDE_TOTAL_TICKETS / p->tickets;
+  				proc->stride = STRIDE_TOTAL_TICKETS / proc->tickets;
+  				return tickets;
+			}
+		}
+		return -3;
+	}
+	return 0;
+}
\ No newline at end of file
diff -uNr DIR_XV6_BASE/proc.h DIR_XV6_WORKING/proc.h
--- DIR_XV6_BASE/proc.h	2017-02-12 17:27:09.000000000 -0800
+++ DIR_XV6_WORKING/proc.h	2017-02-21 22:22:51.473385661 -0800
@@ -66,10 +66,13 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int stride;                  // Process Stride Value
+  int pass;                    // Process Pass Value
+  int tickets;                 // Tickets for process
 };
 
 // Process memory is laid out contiguously, low addresses first:
 //   text
 //   original data and bss
 //   fixed-size stack
-//   expandable heap
+//   expandable heap
\ No newline at end of file
diff -uNr DIR_XV6_BASE/proj1_forktest.c DIR_XV6_WORKING/proj1_forktest.c
--- DIR_XV6_BASE/proj1_forktest.c	2017-02-12 17:27:09.000000000 -0800
+++ DIR_XV6_WORKING/proj1_forktest.c	2017-02-20 14:43:17.547002158 -0800
@@ -5,10 +5,12 @@
    stub functions for the system call user space wrapper functions are provided. 
    REMEMBER to disable the stub functions (by commenting the following macro) to 
    allow your implementation to work properly. */
+/*
 #define STUB_FUNCS
 #ifdef STUB_FUNCS
 void fork_winner(int winner) {}
 #endif
+*/
 
 
 #define TOTAL_TEST_TRIALS 50
diff -uNr DIR_XV6_BASE/proj1_schdtest.c DIR_XV6_WORKING/proj1_schdtest.c
--- DIR_XV6_BASE/proj1_schdtest.c	2017-02-22 17:17:37.649807783 -0800
+++ DIR_XV6_WORKING/proj1_schdtest.c	2017-03-01 17:43:16.854179891 -0800
@@ -1,6 +1,217 @@
 #include "types.h"
 #include "user.h"
 
+#define SOLUTION
+
+#ifdef SOLUTION
+#define SCHEDULER_DEFAULT  0
+#define SCHEDULER_STRIDE 1
+
+#define LOOP_CNT 0x02000000
+#define MAX_CHILD_COUNT 6
+
+struct {
+    int pid;
+} pa[MAX_CHILD_COUNT];
+
+int pipe_fd[MAX_CHILD_COUNT][2];
+
+void do_child(void)
+{
+    int cnt = 0;
+    int tmp = 0;
+    int n = 2 * LOOP_CNT;
+    
+    //printf(1, "I, %d , have %d tickets\n", getpid(), tickets_owned());
+
+    while(cnt < n)
+    {
+        tmp += cnt;
+        cnt ++;
+    }
+
+    exit();
+}
+
+
+void do_parent(void)
+{
+    int cnt = 0;
+    int tmp = 0;
+    int n = 2 * LOOP_CNT;
+
+    //printf(1, "I, %d , have %d tickets\n", getpid(), tickets_owned());
+
+    while(cnt < n)
+    {
+        tmp += cnt;
+        cnt ++;
+    }
+}
+
+void do_parent_partial(void)
+{
+    int cnt = 0;
+    int tmp = 0;
+    int n = 1.2 * LOOP_CNT;
+    
+    //printf(1, "I,%d , have %d tickets\n", getpid(), tickets_owned());
+
+    while(cnt < n)
+    {
+        tmp += cnt;
+        cnt ++;
+    }
+}
+
+
+
+// Create "cnt" child processes and block all of them by having them read from empty pipes
+void create_child_process(int cnt)
+{
+    int child_cnt = cnt > MAX_CHILD_COUNT ? MAX_CHILD_COUNT : cnt;
+    int i = 0;
+    int c = 0;
+
+    for (i = 0; i < child_cnt; i++)
+    {
+        if (pipe(pipe_fd[i]) < 0)
+        {
+            printf(1, "pipe() failed!\n");
+            exit();
+        }
+
+        pa[i].pid = fork();
+
+        if (pa[i].pid < 0)
+        {
+            printf(1, "fork() failed!\n");
+            exit();
+        }
+        else if (pa[i].pid == 0) // child
+        {
+            close(pipe_fd[i][1]); // close the write end on the child side
+            read(pipe_fd[i][0], &c, 1); // reading any char will unblock it
+            do_child();  
+        }
+        else // parent
+        {
+            close(pipe_fd[i][0]); // close the read end on the parent side
+        }
+    }        
+}
+
+void let_go_child_processes(int cnt)
+{
+    int child_cnt = cnt > MAX_CHILD_COUNT ? MAX_CHILD_COUNT : cnt;
+    int i = 0; 
+    
+    for (i = 0; i < child_cnt; i++)
+    {   
+       write(pipe_fd[i][1], "A", 1); // start child-i
+       close(pipe_fd[i][1]); // close the write end on the parent side
+    }    
+}
+
+
+void wait_on_child_processes(int cnt)
+{
+    int child_cnt = cnt > MAX_CHILD_COUNT ? MAX_CHILD_COUNT : cnt;
+    int i = 0; 
+    
+    for (i = 0; i < child_cnt; i++)
+    {   
+       if (wait() < 0)
+       {
+            printf(1, "wait() on child-%d failed!\n", i);
+       }
+    }            
+
+}
+
+
+int
+main(int argc, char *argv[])
+{
+    int scheduler = 0;
+    int child_cnt = 0;
+    int n1 = 0, n2 = 0;
+    
+    // ---------------- test case 0 -------------------
+    child_cnt = 3;
+    printf(1, "===== Test case 0: default (RR) scheduler, %d processes =====\n", child_cnt);
+    scheduler = SCHEDULER_DEFAULT;
+    set_sched(scheduler);
+    create_child_process(child_cnt);
+    let_go_child_processes(child_cnt);
+    enable_sched_trace(1);
+    do_parent();    
+    wait_on_child_processes(child_cnt);
+    enable_sched_trace(0);
+    printf(1, "\n\n");
+    
+    // ---------------- test case 1 -------------------
+    child_cnt = 2;
+
+    printf(1, "===== Stride scheduling test case 1 =====\n");
+    printf(1, ">>> %d child processes, no transfer.\n", child_cnt);
+    scheduler = SCHEDULER_STRIDE;
+    set_sched(scheduler);
+
+    create_child_process(child_cnt);
+    let_go_child_processes(child_cnt);
+
+    enable_sched_trace(1);
+
+    do_parent();
+    wait_on_child_processes(child_cnt);
+
+    enable_sched_trace(0);
+
+    printf(1, "\n\n");
+
+
+    // ---------------- test case 2 -------------------
+    child_cnt = 1;
+
+    printf(1, "===== Stride scheduling test case 2 =====\n");
+    printf(1, ">>> %d child processes, parent tranfers 1/2 of its tickets at the begining.\n", child_cnt);
+    scheduler = SCHEDULER_STRIDE;
+    set_sched(scheduler);
+    create_child_process(child_cnt);
+
+    printf(1, "Parent: tickets_owned() returned [%d]\n", tickets_owned());
+    printf(1, "Parent: tranfer out -2 tickets, transfer_tickets() returned [%d]\n", 
+            transfer_tickets(pa[0].pid, -2));
+    printf(1, "Parent: tranfer out all tickets, transfer_tickets() returned [%d]\n", 
+            transfer_tickets(pa[0].pid, tickets_owned()));
+    printf(1, "Parent: tranfer out 1 ticket to pid 1000, transfer_tickets() returned [%d]\n", 
+            transfer_tickets(1000, 1));            
+
+    n1 = tickets_owned()/2;            
+     n2 = transfer_tickets(pa[0].pid, n1); // Here parent should have 25 tickets, child has 75 ==> ceiling(100/25)=4, ceiling(100/25)=1 ==> output should like: PCCCCPCCCC...
+    printf(1, "Parent: tranfer out %d tickets, remaining tickets [%d]\n", n1, n2);
+
+    
+    
+    let_go_child_processes(child_cnt);
+
+    enable_sched_trace(1);
+
+    do_parent();
+    wait_on_child_processes(child_cnt);
+
+    enable_sched_trace(0);
+
+    printf(1, "\n\n");      
+    
+
+    
+    // ---------------------- end -----------------------------
+    exit(); // main process terminates
+}
+#else
+
 #define LOOP_CNT 0x01000000
 
 void do_child(void)
@@ -46,14 +257,14 @@
     }
     else // parent
     {
-	   do_parent();
+       do_parent();
        if (wait() < 0)
        {
             printf(1, "wait() failed!\n");
        }
     }
-	
-	printf(1, "\n");
+    
+    printf(1, "\n");
 }
 
 int
@@ -72,3 +283,5 @@
     exit();
 }
 
+
+#endif
diff -uNr DIR_XV6_BASE/shutdown.c DIR_XV6_WORKING/shutdown.c
--- DIR_XV6_BASE/shutdown.c	2017-02-12 17:27:09.000000000 -0800
+++ DIR_XV6_WORKING/shutdown.c	2017-02-19 09:25:43.703283963 -0800
@@ -6,11 +6,11 @@
    stub functions for the system call user space wrapper functions are provided. 
    REMEMBER to disable the stub functions (by commenting the following macro) to 
    allow your implementation to work properly. */
-#define STUB_FUNCS
+/*#define STUB_FUNCS
 #ifdef STUB_FUNCS
 void shutdown(void) {}
 #endif
-
+*/
 
 int 
 main(int argc, char * argv[])
diff -uNr DIR_XV6_BASE/syscall.c DIR_XV6_WORKING/syscall.c
--- DIR_XV6_BASE/syscall.c	2017-02-12 17:27:09.000000000 -0800
+++ DIR_XV6_WORKING/syscall.c	2017-02-23 15:05:43.772086088 -0800
@@ -99,6 +99,11 @@
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_enable_sched_trace(void);
+extern int sys_shutdown(void);
+extern int sys_fork_winner(void);
+extern int sys_tickets_owned(void);
+extern int sys_transfer_tickets(void);
+extern int sys_set_sched(void);
 
 
 static int (*syscalls[])(void) = {
@@ -124,6 +129,12 @@
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_enable_sched_trace]   sys_enable_sched_trace,
+[SYS_shutdown]   sys_shutdown,
+[SYS_fork_winner]   sys_fork_winner,
+[SYS_tickets_owned]   sys_tickets_owned,
+[SYS_transfer_tickets]   sys_transfer_tickets,
+[SYS_set_sched]   sys_set_sched,
+
 
 };
 
diff -uNr DIR_XV6_BASE/syscall.h DIR_XV6_WORKING/syscall.h
--- DIR_XV6_BASE/syscall.h	2017-02-12 17:27:09.000000000 -0800
+++ DIR_XV6_WORKING/syscall.h	2017-02-23 15:05:05.968176056 -0800
@@ -21,4 +21,8 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_enable_sched_trace  22
-
+#define SYS_shutdown  23
+#define SYS_fork_winner  24
+#define SYS_tickets_owned  25
+#define SYS_transfer_tickets  26
+#define SYS_set_sched  27 
\ No newline at end of file
diff -uNr DIR_XV6_BASE/sysproc.c DIR_XV6_WORKING/sysproc.c
--- DIR_XV6_BASE/sysproc.c	2017-02-12 17:27:09.000000000 -0800
+++ DIR_XV6_WORKING/sysproc.c	2017-02-23 16:51:24.347018954 -0800
@@ -100,3 +100,40 @@
 
   return 0;
 }
+
+int sys_shutdown(void)
+{
+  outw(0xB004, 0x2000);
+  return 0;
+}
+
+extern int fork_selector;
+int sys_fork_winner(void)
+{
+  argint(0, &fork_selector);
+  return 0;
+}
+
+int sys_tickets_owned(void)
+{
+
+  return tickets_owned();
+}
+
+int sys_transfer_tickets(void)
+{
+  int pid;
+  int tickets;
+  argint(0, &pid);
+  argint(1, &tickets);
+  if(tickets < 0)
+    return -1;
+  return transfer_tickets(pid, tickets);
+}
+
+extern int scheduler_type;
+int sys_set_sched(void)
+{
+  argint(0, &scheduler_type);
+  return 0;
+}
\ No newline at end of file
diff -uNr DIR_XV6_BASE/user.h DIR_XV6_WORKING/user.h
--- DIR_XV6_BASE/user.h	2017-02-12 17:27:09.000000000 -0800
+++ DIR_XV6_WORKING/user.h	2017-02-23 15:04:22.396276326 -0800
@@ -23,6 +23,11 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int shutdown(void);
+void fork_winner(int winner);
+int tickets_owned(void);
+int transfer_tickets(int pid, int tickets);
+void set_sched(int);
 
 // ulib.c
 int stat(char*, struct stat*);
diff -uNr DIR_XV6_BASE/usys.S DIR_XV6_WORKING/usys.S
--- DIR_XV6_BASE/usys.S	2017-02-12 17:27:09.000000000 -0800
+++ DIR_XV6_WORKING/usys.S	2017-02-23 15:04:42.092231472 -0800
@@ -30,3 +30,8 @@
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(enable_sched_trace)
+SYSCALL(shutdown)
+SYSCALL(fork_winner)
+SYSCALL(tickets_owned)
+SYSCALL(transfer_tickets)
+SYSCALL(set_sched)
